import { Request, Response, Router } from "express";
import multer from "multer";
import streamifier from "streamifier";
import cloudinary from "../src/config/configCloud";
import db from "../db/dbconnect";
import { RowDataPacket, ResultSetHeader } from "mysql2";

export const router = Router();
const upload = multer({ storage: multer.memoryStorage() });

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
const uploadToCloudinary = (buffer: Buffer, folder: string) =>
  new Promise<any>((resolve, reject) => {
    const stream = cloudinary.uploader.upload_stream(
      { folder, resource_type: "image" },
      (error: any, result: any) => {
        if (error) reject(error);
        else resolve(result);
      }
    );
    streamifier.createReadStream(buffer).pipe(stream);
  });

// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Location)
// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Location)
router.post(
  "/location",
  upload.single("image"),
  async (req: Request, res: Response) => {
    const { name, address, subdistrict, district, province, type_id } =
      req.body;
    let imageUrl = "";

    try {
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (
        !name ||
        !address ||
        !subdistrict ||
        !district ||
        !province ||
        !type_id
      ) {
        return res
          .status(400)
          .json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á" });
      }

      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [nameRows] = await db.execute<RowDataPacket[]>(
        "SELECT name FROM location WHERE name = ?",
        [name]
      );
      if (nameRows.length > 0) {
        return res
          .status(400)
          .json({ message: "‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }

      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ type_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á LocationType ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [typeRows] = await db.execute<RowDataPacket[]>(
        "SELECT type_id FROM locationtype WHERE type_id = ?",
        [type_id]
      );
      if (typeRows.length === 0) {
        return res
          .status(400)
          .json({ message: "‚ùå type_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
      if (req.file && req.file.buffer) {
        const result = await uploadToCloudinary(req.file.buffer, "locations");
        imageUrl = result.secure_url;
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const [result] = await db.execute<ResultSetHeader>(
        `INSERT INTO location (name, address, subdistrict, district, province, image, type_id)
         VALUES (?, ?, ?, ?, ?, ?, ?)`,
        [name, address, subdistrict, district, province, imageUrl, type_id]
      );

      res.json({
        message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Location ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        location_id: result.insertId,
        data: {
          name,
          address,
          subdistrict,
          district,
          province,
          image: imageUrl,
          type_id,
        },
      });
    } catch (err: any) {
      console.error("Error in POST /location:", err);
      res.status(500).json({ message: "‚ùå Server Error", error: err.message });
    }
  }
);

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Location
router.get("/location", async (req: Request, res: Response) => {
  try {
    const [rows] = await db.execute<RowDataPacket[]>("SELECT * FROM location");
    res.json(rows);
  } catch (err: any) {
    console.error("Error in GET /location:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

router.post("/location_type", async (req: Request, res: Response) => {
  const { nametype } = req.body;

  try {
    if (!nametype) {
      return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å nametype" });
    }

    const [result] = await db.execute<ResultSetHeader>(
      "INSERT INTO locationtype (nametype) VALUES (?)",
      [nametype]
    );

    res.json({
      message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LocationType ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      type_id: result.insertId,
      nametype,
    });
  } catch (err: any) {
    console.error("Error in POST /location_type:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

/* ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å LocationType */
router.get("/location_type", async (req: Request, res: Response) => {
  try {
    const [rows] = await db.execute<RowDataPacket[]>(
      "SELECT * FROM locationtype"
    );
    res.json(rows);
  } catch (err: any) {
    console.error("Error in GET /location_type:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

export default router;
