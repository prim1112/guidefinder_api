import { Request, Response, Router } from "express";
import multer from "multer";
import streamifier from "streamifier";
import bcrypt from "bcrypt"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° bcrypt
import cloudinary from "../src/config/configCloud";
import db from "../db/dbconnect";
import { RowDataPacket, ResultSetHeader } from "mysql2";

export const router = Router();
const upload = multer({ storage: multer.memoryStorage() });

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏∂‡πâ‡∏ô Cloudinary
const uploadToCloudinary = (buffer: Buffer, folder: string) =>
  new Promise<any>((resolve, reject) => {
    const stream = cloudinary.uploader.upload_stream(
      { folder, resource_type: "image" },
      (error: any, result: any) => {
        if (error) reject(error);
        else resolve(result);
      }
    );
    streamifier.createReadStream(buffer).pipe(stream);
  });

// ‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Cloudinary
router.get("/test-cloudinary", (req, res) => {
  res.json({
    cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
    api_key: process.env.CLOUDINARY_API_KEY ? "‚úÖ Loaded" : "‚ùå Missing",
    api_secret: process.env.CLOUDINARY_API_SECRET ? "‚úÖ Loaded" : "‚ùå Missing",
  });
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/customers", (req: Request, res: Response) => {
  const sql = "SELECT * FROM customer";

  db.query(sql, (err: any, rows: any[]) => {
    if (err) return handleResponse(res, err);

    const sanitizedRows = rows.map((row) => {
      const { password, ...sanitized } = row;
      return sanitized;
    });

    handleResponse(res, null, sanitizedRows);
  });
});

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ã‡πâ‡∏≥
router.post("/customers_check-phone", async (req: Request, res: Response) => {
  const { phone } = req.body;

  const [rows] = await db.execute<RowDataPacket[]>(
    "SELECT cid FROM customer WHERE phone = ?",
    [phone]
  );

  if (rows.length > 0) {
    return res.status(400).json({ message: "‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
  }

  res.json({ message: "‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" });
});

// ‚úÖ Register Customer
router.post(
  "/customers",
  upload.single("image_customer"),
  async (req: Request, res: Response) => {
    const { name, phone, email, password } = req.body;
    let imageUrl = "";

    try {
      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥
      const [phoneRows] = await db.execute<RowDataPacket[]>(
        "SELECT cid FROM customer WHERE phone = ?",
        [phone]
      );
      if (phoneRows.length > 0) {
        return res
          .status(400)
          .json({ message: "‚ùå ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }

      // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏±‡πâ‡∏á customer ‡πÅ‡∏•‡∏∞ guide
      const [emailRows] = await db.execute<RowDataPacket[]>(
        `SELECT email FROM customer WHERE email = ?
         UNION
         SELECT email FROM guide WHERE email = ?`,
        [email, email]
      );

      if (emailRows.length > 0) {
        return res
          .status(400)
          .json({
            message: "‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö Customer ‡∏´‡∏£‡∏∑‡∏≠ Guide)",
          });
      }

      // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      const hashedPassword = await bcrypt.hash(password, 10);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
      if (req.file && req.file.buffer) {
        const result = await uploadToCloudinary(req.file.buffer, "customers");
        imageUrl = result.secure_url;
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const [insertResult] = await db.execute<ResultSetHeader>(
        "INSERT INTO customer (name, phone, email, image_customer, password) VALUES (?, ?, ?, ?, ?)",
        [name, phone, email, imageUrl, hashedPassword]
      );

      res.json({
        message: "‚úÖ Register successfully",
        id: insertResult.insertId,
      });
    } catch (err: any) {
      console.error("Error in register:", err);
      res.status(500).json({ message: "‚ùå Server Error", error: err.message });
    }
  }
);

// ‚úÖ Login (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
router.post("/login", async (req: Request, res: Response) => {
  const { email, password } = req.body;

  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
    if (!email || !password) {
      return res
        .status(400)
        .json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email ‡πÅ‡∏•‡∏∞ Password" });
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Email
    const [rows] = await db.execute<RowDataPacket[]>(
      "SELECT * FROM customer WHERE email = ?",
      [email]
    );

    const user = rows[0];
    if (!user) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
    res.json({
      message: "‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: {
        cid: user.cid,
        name: user.name,
        phone: user.phone,
        email: user.email,
        image_customer: user.image_customer,
      },
    });
  } catch (err: any) {
    console.error("Error in login:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

// ‚úÖ Helper ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö API
export function handleResponse(
  res: Response,
  err: Error | null,
  data?: any,
  notFoundStatusCode: number = 404,
  notFoundMessage: string = "Not found",
  affectedRows: number | null = null
): void {
  if (err) {
    res.status(500).json({ error: err.message });
    return;
  }
  if (!data && !affectedRows) {
    res.status(notFoundStatusCode).json({ error: notFoundMessage });
    return;
  }
  res.json(data);
}
