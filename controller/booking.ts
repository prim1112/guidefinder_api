import { Request, Response, Router } from "express";
import db from "../db/dbconnect";
import { RowDataPacket, ResultSetHeader } from "mysql2";

export const router = Router();

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/booking", async (req: Request, res: Response) => {
  try {
    const [rows] = await db.execute<RowDataPacket[]>("SELECT * FROM booking");
    res.json(rows);
  } catch (err: any) {
    console.error("Error in GET /booking:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

// ‚úÖ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏ï‡∏≤‡∏° gid (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏Å‡∏î‡πå‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô)
router.get("/booking/:gid", async (req: Request, res: Response) => {
  const { gid } = req.params;

  try {
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ gid ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö guide ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [guideRows] = await db.execute<RowDataPacket[]>(
      "SELECT gid FROM guide WHERE gid = ?",
      [gid]
    );

    if (guideRows.length === 0) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö gid ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö guide" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏Å‡∏î‡πå‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    const [bookings] = await db.execute<RowDataPacket[]>(
      "SELECT * FROM booking WHERE gid = ?",
      [gid]
    );

    if (bookings.length === 0) {
      return res
        .status(404)
        .json({ message: "‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏Å‡∏î‡πå‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ" });
    }

    res.json({
      message: "‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏Ç‡∏≠‡∏á‡πÑ‡∏Å‡∏î‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      count: bookings.length,
      data: bookings,
    });
  } catch (err: any) {
    console.error("Error in GET /booking/:gid:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

// ‚úÖ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Booking
router.post("/booking", async (req: Request, res: Response) => {
  const {
    gid,
    cid,
    location_id,
    people,
    start_date,
    end_date,
    status,
    total_price,
  } = req.body;

  try {
    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (
      !gid ||
      !cid ||
      !location_id ||
      !people ||
      !start_date ||
      !end_date ||
      !status ||
      !total_price
    ) {
      return res
        .status(400)
        .json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á" });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ gid ‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á guide ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [guideRows] = await db.execute<RowDataPacket[]>(
      "SELECT gid FROM guide WHERE gid = ?",
      [gid]
    );
    if (guideRows.length === 0) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö gid ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö guide" });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ cid ‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á customer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [customerRows] = await db.execute<RowDataPacket[]>(
      "SELECT cid FROM customer WHERE cid = ?",
      [cid]
    );
    if (customerRows.length === 0) {
      return res.status(400).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö cid ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö customer" });
    }

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ location_id ‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á location ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [locationRows] = await db.execute<RowDataPacket[]>(
      "SELECT location_id FROM location WHERE location_id = ?",
      [location_id]
    );
    if (locationRows.length === 0) {
      return res
        .status(400)
        .json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö location_id ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö location" });
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [result] = await db.execute<ResultSetHeader>(
      `INSERT INTO booking 
      (gid, cid, location_id, people, start_date, end_date, status, total_price)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [gid, cid, location_id, people, start_date, end_date, status, total_price]
    );

    res.json({
      message: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking_id: result.insertId,
      data: {
        gid,
        cid,
        location_id,
        people,
        start_date,
        end_date,
        status,
        total_price,
      },
    });
  } catch (err: any) {
    console.error("Error in POST /booking:", err);
    res.status(500).json({ message: "‚ùå Server Error", error: err.message });
  }
});

export default router;
